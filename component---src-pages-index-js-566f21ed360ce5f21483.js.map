{"version":3,"sources":["webpack:///./src/components/HelloWorld/HelloWorld.js","webpack:///./src/components/HelloWorld/index.js","webpack:///./src/pages/index.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/seo.js","webpack:///./src/components/Header/index.js","webpack:///./src/components/Header/Header.js","webpack:///./src/components/Footer/index.js","webpack:///./src/components/Footer/Footer.js","webpack:///./src/components/Layout/Layout.js","webpack:///./src/components/Layout/index.js"],"names":["HelloWorld","_ref","siteMetadata","greetings","react_default","a","createElement","className","styles","container","name","title","fullName","gatsby_browser_entry","query","render","data","HelloWorld_HelloWorld","site","allJavascriptFrontmatter","edges","node","frontmatter","staticData","greet","_2893127194","IndexPage","Layout","showHome","seo","keywords","components_HelloWorld","__webpack_require__","d","__webpack_exports__","StaticQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby_link__WEBPACK_IMPORTED_MODULE_1__","gatsby_link__WEBPACK_IMPORTED_MODULE_1___default","loader","enqueue","StaticQueryContext","React","createContext","StaticQueryDataRenderer","staticQueryData","finalData","Fragment","props","children","Consumer","m","module","exports","require","default","ProdPageRenderer","location","pageResources","InternalPageRenderer","Object","assign","json","SEO","description","lang","meta","react__WEBPACK_IMPORTED_MODULE_1___default","gatsby__WEBPACK_IMPORTED_MODULE_3__","detailsQuery","metaDescription","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","titleTemplate","content","property","author","allFile","childImageSharp","resize","src","concat","length","join","_public_static_d_4052202896_json__WEBPACK_IMPORTED_MODULE_0__","defaultProps","Header","header","menu","menuItem","to","Footer","footer","href","twitterHandle","link","target","_ref$showHome","pageWrapper","components_Header","contentContainer","components_Footer","_1062546648"],"mappings":"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","file":"component---src-pages-index-js-566f21ed360ce5f21483.js","sourcesContent":["import PropTypes from 'prop-types'\nimport React from 'react'\nimport styles from './HelloWorld.module.scss'\nimport { StaticQuery, graphql } from 'gatsby'\n\nconst HelloWorld = ({ siteMetadata, greetings }) => (\n  <div className={styles.container}>\n    <h1 className={styles.name}>\n      {siteMetadata.title} | {siteMetadata.fullName}\n    </h1>\n    <div>{greetings}</div>\n  </div>\n)\n\nHelloWorld.propTypes = {\n  siteMetadata: PropTypes.object,\n  greetings: PropTypes.string,\n}\n\nexport default () => (\n  <StaticQuery\n    query={graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            fullName\n          }\n        }\n        allJavascriptFrontmatter {\n          edges {\n            node {\n              frontmatter {\n                staticData {\n                  greet\n                }\n              }\n            }\n          }\n        }\n      }\n    `}\n    render={data => (\n      <HelloWorld\n        siteMetadata={data.site.siteMetadata}\n        greetings={\n          data.allJavascriptFrontmatter.edges[0].node.frontmatter.staticData\n            .greet\n        }\n      />\n    )}\n  />\n)\n","import HelloWorld from './HelloWorld'\nexport default HelloWorld\n","import React from 'react'\nimport Layout from '@components/Layout'\nimport SEO from '@components/seo'\nimport HelloWorld from '@components/HelloWorld'\n\nconst IndexPage = ({ data }) => (\n  <Layout showHome={false}>\n    <SEO\n      title=\"Dinesh Pandiyan\"\n      keywords={[`developer`, `engineer`, `react`, `javascript`]}\n    />\n    <HelloWorld />\n  </Layout>\n)\n\nexport default IndexPage\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { StaticQuery, graphql } from 'gatsby'\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  return (\n    <StaticQuery\n      query={detailsQuery}\n      render={data => {\n        const metaDescription =\n          description || data.site.siteMetadata.description\n        return (\n          <Helmet\n            htmlAttributes={{\n              lang,\n            }}\n            title={title}\n            titleTemplate={`${data.site.siteMetadata.fullName} | %s`}\n            meta={[\n              {\n                name: `description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:title`,\n                content: title,\n              },\n              {\n                property: `og:description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:type`,\n                content: `website`,\n              },\n              {\n                name: `twitter:card`,\n                content: `summary`,\n              },\n              {\n                name: `twitter:creator`,\n                content: data.site.siteMetadata.author,\n              },\n              {\n                name: `twitter:title`,\n                content: title,\n              },\n              {\n                name: `twitter:description`,\n                content: metaDescription,\n              },\n              {\n                name: `og:image`,\n                content: data.allFile.edges[0].node.childImageSharp.resize.src,\n              },\n            ]\n              .concat(\n                keywords.length > 0\n                  ? {\n                      name: `keywords`,\n                      content: keywords.join(`, `),\n                    }\n                  : []\n              )\n              .concat(meta)}\n          />\n        )\n      }}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  keywords: [],\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n\n// moustache.png will be set as link preview image\nconst detailsQuery = graphql`\n  query DefaultSEOQuery {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n        fullName\n      }\n    }\n    allFile(\n      filter: { sourceInstanceName: { eq: \"images\" }, name: { eq: \"moustache\" } }\n    ) {\n      edges {\n        node {\n          name\n          extension\n          relativePath\n          publicURL\n          childImageSharp {\n            resize {\n              width\n              height\n              aspectRatio\n              originalName\n              src\n            }\n          }\n        }\n      }\n    }\n  }\n`\n","import Header from './Header'\nexport default Header\n","import PropTypes from 'prop-types'\nimport React from 'react'\nimport { Link } from 'gatsby'\nimport styles from './Header.module.scss'\n\nconst Header = ({ showHome }) => (\n  <header className={styles.header}>\n    <div className={styles.menu}>\n      {showHome ? (\n        <div className={styles.menuItem}>\n          <Link to=\"/\">Home</Link>\n        </div>\n      ) : null}\n      <div className={styles.menuItem}>\n        <Link to=\"/about/\">About</Link>\n      </div>\n    </div>\n  </header>\n)\n\nHeader.propTypes = {\n  siteMetadata: PropTypes.object,\n  showHome: PropTypes.bool,\n}\n\nexport default Header\n","import Footer from './Footer'\nexport default Footer\n","import PropTypes from 'prop-types'\nimport React from 'react'\nimport styles from './Footer.module.scss'\n\nconst Footer = ({ siteMetadata }) => (\n  <footer className={styles.footer}>\n    <div>\n      <span>© Copyright 2019 </span>\n      <a\n        href={siteMetadata.twitterHandle}\n        className={styles.link}\n        target=\"blank\"\n      >\n        {siteMetadata.fullName}\n      </a>\n    </div>\n  </footer>\n)\n\nFooter.propTypes = {\n  siteMetadata: PropTypes.object,\n}\n\nexport default Footer\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { StaticQuery, graphql } from 'gatsby'\nimport Header from '@components/Header'\nimport Footer from '@components/Footer'\nimport styles from './Layout.module.scss'\n\nconst Layout = ({ children, showHome = true }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n            fullName\n            twitterHandle\n          }\n        }\n      }\n    `}\n    render={data => (\n      <div className={styles.pageWrapper}>\n        <Header showHome={showHome} />\n        <div className={styles.contentContainer}>{children}</div>\n        <Footer siteMetadata={data.site.siteMetadata} />\n      </div>\n    )}\n  />\n)\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n  showHome: PropTypes.bool,\n}\n\nexport default Layout\n","import Layout from './Layout'\nexport default Layout;\n"],"sourceRoot":""}