{"version":3,"sources":["webpack:///./src/templates/blog-post.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/seo.js","webpack:///./src/components/Header/index.js","webpack:///./src/components/Header/Header.js","webpack:///./src/components/Footer/index.js","webpack:///./src/components/Footer/Footer.js","webpack:///./src/components/Layout/Layout.js","webpack:///./src/components/Layout/index.js"],"names":["__webpack_require__","r","__webpack_exports__","d","query","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_components_Layout__WEBPACK_IMPORTED_MODULE_1__","_components_seo__WEBPACK_IMPORTED_MODULE_2__","_blog_post_module_scss__WEBPACK_IMPORTED_MODULE_3__","_blog_post_module_scss__WEBPACK_IMPORTED_MODULE_3___default","BlogPost","_ref","post","data","markdownRemark","a","createElement","title","frontmatter","className","styles","date","content","dangerouslySetInnerHTML","__html","html","StaticQuery","gatsby_link__WEBPACK_IMPORTED_MODULE_1__","gatsby_link__WEBPACK_IMPORTED_MODULE_1___default","loader","enqueue","StaticQueryContext","React","createContext","StaticQueryDataRenderer","staticQueryData","render","finalData","Fragment","props","children","Consumer","m","module","exports","require","default","ProdPageRenderer","location","pageResources","InternalPageRenderer","Object","assign","json","SEO","description","lang","meta","keywords","react__WEBPACK_IMPORTED_MODULE_1___default","gatsby__WEBPACK_IMPORTED_MODULE_3__","detailsQuery","metaDescription","site","siteMetadata","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","titleTemplate","fullName","name","property","author","allFile","edges","node","childImageSharp","resize","src","concat","length","join","_public_static_d_4052202896_json__WEBPACK_IMPORTED_MODULE_0__","defaultProps","Header","showHome","react_default","header","menu","menuItem","gatsby_browser_entry","to","Footer","footer","href","twitterHandle","link","target","Layout","_ref$showHome","pageWrapper","components_Header","contentContainer","components_Footer","_1062546648"],"mappings":"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","file":"component---src-templates-blog-post-js-25b059c8a6a3d5289205.js","sourcesContent":["import React from 'react'\nimport { graphql } from 'gatsby'\nimport Layout from '@components/Layout'\nimport SEO from '@components/seo'\nimport styles from './blog-post.module.scss'\n\nconst BlogPost = ({ data }) => {\n  const post = data.markdownRemark\n  return (\n    <Layout>\n      <SEO title={post.frontmatter.title} />\n      <h1 className={styles.title}>{post.frontmatter.title}</h1>\n      <div className={styles.date}>{post.frontmatter.date}</div>\n      <div\n        className={styles.content}\n        dangerouslySetInnerHTML={{ __html: post.html }}\n      />\n    </Layout>\n  )\n}\n\nexport default BlogPost\n\nexport const query = graphql`\n  query BlogPostQuery($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM D, YYYY\")\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { StaticQuery, graphql } from 'gatsby'\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  return (\n    <StaticQuery\n      query={detailsQuery}\n      render={data => {\n        const metaDescription =\n          description || data.site.siteMetadata.description\n        return (\n          <Helmet\n            htmlAttributes={{\n              lang,\n            }}\n            title={title}\n            titleTemplate={`${data.site.siteMetadata.fullName} | %s`}\n            meta={[\n              {\n                name: `description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:title`,\n                content: title,\n              },\n              {\n                property: `og:description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:type`,\n                content: `website`,\n              },\n              {\n                name: `twitter:card`,\n                content: `summary`,\n              },\n              {\n                name: `twitter:creator`,\n                content: data.site.siteMetadata.author,\n              },\n              {\n                name: `twitter:title`,\n                content: title,\n              },\n              {\n                name: `twitter:description`,\n                content: metaDescription,\n              },\n              {\n                name: `og:image`,\n                content: data.allFile.edges[0].node.childImageSharp.resize.src,\n              },\n            ]\n              .concat(\n                keywords.length > 0\n                  ? {\n                      name: `keywords`,\n                      content: keywords.join(`, `),\n                    }\n                  : []\n              )\n              .concat(meta)}\n          />\n        )\n      }}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  keywords: [],\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n\n// moustache.png will be set as link preview image\nconst detailsQuery = graphql`\n  query DefaultSEOQuery {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n        fullName\n      }\n    }\n    allFile(\n      filter: { sourceInstanceName: { eq: \"images\" }, name: { eq: \"moustache\" } }\n    ) {\n      edges {\n        node {\n          name\n          extension\n          relativePath\n          publicURL\n          childImageSharp {\n            resize {\n              width\n              height\n              aspectRatio\n              originalName\n              src\n            }\n          }\n        }\n      }\n    }\n  }\n`\n","import Header from './Header'\nexport default Header\n","import PropTypes from 'prop-types'\nimport React from 'react'\nimport { Link } from 'gatsby'\nimport styles from './Header.module.scss'\n\nconst Header = ({ showHome }) => (\n  <header className={styles.header}>\n    <div className={styles.menu}>\n      {showHome ? (\n        <div className={styles.menuItem}>\n          <Link to=\"/\">Home</Link>\n        </div>\n      ) : null}\n      <div className={styles.menuItem}>\n        <Link to=\"/about/\">About</Link>\n      </div>\n    </div>\n  </header>\n)\n\nHeader.propTypes = {\n  siteMetadata: PropTypes.object,\n  showHome: PropTypes.bool,\n}\n\nexport default Header\n","import Footer from './Footer'\nexport default Footer\n","import PropTypes from 'prop-types'\nimport React from 'react'\nimport styles from './Footer.module.scss'\n\nconst Footer = ({ siteMetadata }) => (\n  <footer className={styles.footer}>\n    <div>\n      <span>© Copyright 2019 </span>\n      <a\n        href={siteMetadata.twitterHandle}\n        className={styles.link}\n        target=\"blank\"\n      >\n        {siteMetadata.fullName}\n      </a>\n    </div>\n  </footer>\n)\n\nFooter.propTypes = {\n  siteMetadata: PropTypes.object,\n}\n\nexport default Footer\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { StaticQuery, graphql } from 'gatsby'\nimport Header from '@components/Header'\nimport Footer from '@components/Footer'\nimport styles from './Layout.module.scss'\n\nconst Layout = ({ children, showHome = true }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n            fullName\n            twitterHandle\n          }\n        }\n      }\n    `}\n    render={data => (\n      <div className={styles.pageWrapper}>\n        <Header showHome={showHome} />\n        <div className={styles.contentContainer}>{children}</div>\n        <Footer siteMetadata={data.site.siteMetadata} />\n      </div>\n    )}\n  />\n)\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n  showHome: PropTypes.bool,\n}\n\nexport default Layout\n","import Layout from './Layout'\nexport default Layout;\n"],"sourceRoot":""}